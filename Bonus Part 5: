@startuml
title Combining 10 highest priority use cases

actor User
participant WebInterface
participant PostControl
participant CommentControl
participant MediaService
participant TutorialControl
database Database

== Use Case 1, 8, 9: Tutorials Section (also includes filtering by tags/difficulty) ==
User -> WebInterface: requestTutorialsSection(difficultyLevel, tags)
activate WebInterface
WebInterface -> TutorialControl: getTutorials(difficultyLevel, tags)
activate TutorialControl
TutorialControl -> Database: fetchTutorials(difficultyLevel, tags)
activate Database
Database --> TutorialControl: filteredTutorialsList
deactivate Database
TutorialControl --> WebInterface: formattedTutorialsList
deactivate TutorialControl
WebInterface --> User: displayTutorials(filteredTutorialsList)
deactivate WebInterface

== Use Case 2: Song Style Tutorial ==
User -> WebInterface: requestStyleTutorial(currentTutorial)
activate WebInterface
WebInterface -> TutorialControl: getStyleTutorial(currentTutorial)
activate TutorialControl
TutorialControl -> Database: fetchStyleTutorial(currentTutorial)
activate Database
Database --> TutorialControl: styleTutorial
deactivate Database
TutorialControl --> WebInterface: styleTutorialObj
deactivate TutorialControl
WebInterface --> User: displayStyleTutorial(styleTutorialObj)
deactivate WebInterface

== Use Case 3: View Music Community Board ==

User -> WebInterface: requestCommunityBoard()
activate WebInterface
WebInterface -> PostControl: getRecentPosts()
activate PostControl
PostControl -> Database: fetchPosts(order=recent)
activate Database
Database --> PostControl: postList
deactivate Database
PostControl --> WebInterface: formattedPosts
deactivate PostControl
WebInterface --> User: displayPosts(postList)
deactivate WebInterface

== Use Case 4: Create Community Post ==

User -> WebInterface: clickCreatePost()
activate WebInterface
WebInterface --> User: displayPostForm()
User -> WebInterface: submitPost(content, tags)
WebInterface -> PostControl: createPost(content, tags, userID)
activate PostControl
PostControl -> Database: insertPost(content, tags, userID, timestamp)
activate Database
Database --> PostControl: confirmPostID
deactivate Database
PostControl --> WebInterface: returnSuccess(postID)
deactivate PostControl
WebInterface --> User: displayConfirmation()
deactivate WebInterface

== Use Case 5: Community Post with Media ==

User -> WebInterface: clickCreatePost()
activate WebInterface
WebInterface --> User: displayPostForm()

User -> WebInterface: uploadMedia(file)
WebInterface -> MediaService: storeMedia(file)
activate MediaService
MediaService --> WebInterface: return mediaURL
deactivate MediaService

User -> WebInterface: submitPost(content, mediaURL)
WebInterface -> PostControl: createPost(content, mediaURL, userID)
activate PostControl
PostControl -> Database: insertPost(content, mediaURL, userID)
activate Database
Database --> PostControl: confirmPostID
deactivate Database
PostControl --> WebInterface: returnSuccess(postID)
deactivate PostControl
WebInterface --> User: displayPostWithMedia()
deactivate WebInterface

note over WebInterface, MediaService
Media upload is asynchronous; user can edit post
while upload completes. This may be subject to change
end note

== Use Case 15: Filtering Posts ==
User -> WebInterface: clickFilters()
activate WebInterface
WebInterface --> User: displayFilterOptions()
User -> WebInterface: requestFilteredPosts(filters)
WebInterface -> PostControl: filterPosts(filters)
activate PostControl
PostControl -> Database: fetchFilteredPosts(filters)
activate Database
Database --> PostControl: filteredPostsList
deactivate Database
PostControl --> WebInterface: filteredPostsList
deactivate PostControl
WebInterface --> User: displayPosts(filteredPostList)
deactivate WebInterface

== Use Case 17: Post Search ==
User -> WebInterface: clickSearchPosts()
activate WebInterface
WebInterface --> User: displaySearchInput()
User -> WebInterface: sendSearchQuery(query)
WebInterface -> PostControl: requestPostsContainingQuery(query)
activate PostControl
PostControl -> Database: fetchPostsContainingQuery(query)
activate Database
Database --> PostControl: queryPostList
deactivate Database
PostControl --> WebInterface: queryPostList
deactivate PostControl
WebInterface --> User: displayPosts(queryPostList)
deactivate WebInterface

== Use Case 6: Add Comment to Post ==

User -> WebInterface: clickAddComment()
activate WebInterface
WebInterface --> User: displayCommentBox()
User -> WebInterface: submitComment(postID, text)
WebInterface -> CommentControl: createComment(postID, userID, text)
activate CommentControl
CommentControl -> Database: insertComment(postID, userID, text, timestamp)
activate Database
Database --> CommentControl: confirmCommentID
deactivate Database
CommentControl --> WebInterface: returnSuccess(commentID)
deactivate CommentControl
WebInterface --> User: displayNewComment()
deactivate WebInterface

== Use Case 7.0: Like Post ==
User -> WebInterface: reactToPost(postID, likeOrDislike)
activate WebInterface
WebInterface -> PostControl: requestUpdateReactCounter(postID, likeOrDislike)
activate PostControl
PostControl -> Database: updatePostReactions(postID, likeOrDislike)
activate Database
Database --> PostControl: confirmPostID
deactivate Database
PostControl --> WebInterface: returnSuccess(confirmPostID)
deactivate PostControl
WebInterface --> User: updateDisplayedPostReactions()
deactivate WebInterface

== Use Case 7.1: Like Comment ==
User -> WebInterface: reactToComment(commentID, likeOrDislike)
activate WebInterface
WebInterface -> CommentControl: requestUpdateReactCounter(commentID, likeOrDislike)
activate CommentControl
CommentControl -> Database: updatePostReactions(post, likeOrDislike)
activate Database
Database --> CommentControl: confirmCommentID
deactivate Database
CommentControl --> WebInterface: returnSuccess(confirmCommentID)
deactivate CommentControl
WebInterface --> User: updateDisplayedCommentReactions()
deactivate WebInterface

@enduml
